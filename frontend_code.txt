// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\index.tsx ---
// app/index.tsx

import AsyncStorage from "@react-native-async-storage/async-storage";
import { useRouter } from "expo-router";
import { useEffect, useState } from "react";

export default function RootIndex() {
  const router = useRouter();

  const [isLoggin, setIsLoggin] = useState(true);

  useEffect(() => {
    const checkSession = async () => {
      try {
        const token = await AsyncStorage.getItem("@token");
        // Si existe token => estamos logueados => ir al dashboard
        if (token) {
          router.replace("/(dashboard)");
        } else {
          // Si no hay token => ir a login
          router.replace("/(usuario)/login");
        }
      } catch (error) {
        console.log("Error leyendo AsyncStorage", error);
        router.replace("/(usuario)/login");
      } finally {
        setIsLoggin(false);
      }
    };

    checkSession();
  }, [router]);

  return <></>;
}


// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\test.tsx ---
import React, { useState } from "react";
import { View, Text, Button } from "react-native";
import CirculasProgress from "react-native-circular-progress-indicator";

export default function Test() {
  const [valor, setValor] = useState(0);

  return (
    <View className="flex-1 items-center justify-center">
      <CirculasProgress
        radius={100}
        value={valor}
        duration={1000}
        valueSuffix="%"
        inActiveStrokeColor="#2ecc71"
        inActiveStrokeOpacity={0.2}
        inActiveStrokeWidth={6}
      />
    </View>
  );
}


// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\_layout.tsx ---
// app/_layout.tsx

import { Stack } from "expo-router";
import { useEffect } from "react";
import * as SplashScreen from "expo-splash-screen";
import { StatusBar } from "expo-status-bar";
import { SafeAreaView } from "react-native";
import { useFonts } from "expo-font";
import "react-native-reanimated";
import { useColorScheme } from "@/hooks/useColorScheme";
import {
  DarkTheme,
  DefaultTheme,
  ThemeProvider,
} from "@react-navigation/native";

import { EntrenamientosProvider } from "@/context/EntrenamientosContext";
import { EjerciciosProvider } from "@/context/EjerciciosContext";
import { ImagesMapProvider } from "@/context/ImagesMapContext";
import { UserProvider } from "@/context/UsersContext";

SplashScreen.preventAutoHideAsync();

export default function RootLayout() {
  const colorScheme = useColorScheme();
  const [loaded] = useFonts({
    SpaceMono: require("../assets/fonts/SpaceMono-Regular.ttf"),
  });

  useEffect(() => {
    if (loaded) {
      SplashScreen.hideAsync();
    }
  }, [loaded]);

  if (!loaded) {
    return null;
  }

  return (
    <ThemeProvider value={colorScheme === "dark" ? DarkTheme : DefaultTheme}>
      <SafeAreaView style={{ flex: 1, backgroundColor: "#121212" }}>
      <UserProvider>
        <ImagesMapProvider>
          <EjerciciosProvider>
            <EntrenamientosProvider>
              <Stack>
                <Stack.Screen name="index" options={{ headerShown: false }} />
                <Stack.Screen
                  name="(dashboard)"
                  options={{ headerShown: false }}
                />
                <Stack.Screen
                  name="(entrenar)"
                  options={{ headerShown: false }}
                />
                <Stack.Screen
                  name="(usuario)"
                  options={{ headerShown: false }}
                />
              </Stack>
              <StatusBar style="auto" />
            </EntrenamientosProvider>
          </EjerciciosProvider>
        </ImagesMapProvider>
      </UserProvider>
      </SafeAreaView>
    </ThemeProvider>
  );
}


// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\(dashboard)\entrenar.tsx ---
// app/(dashboard)/entrenar.tsx

import { ChevronLeft, ChevronRight } from "lucide-react-native";
import { View, Text, TouchableOpacity } from "react-native";
import React, { useState, useEffect } from "react";
import { useRouter } from "expo-router";
import { Image } from "expo-image";

import { useEntrenamientos } from "@/context/EntrenamientosContext";
import { useImagesMap } from "@/context/ImagesMapContext";

export default function TrainingSelector() {
  const router = useRouter();

  const { entrenamientos } = useEntrenamientos();
  const { imagesMap } = useImagesMap();

  const [index, setIndex] = useState(0);

  // Si hay entrenamientos, selecciona uno aleatorio al iniciar
  useEffect(() => {
    if (entrenamientos.length > 0) {
      const randomIndex = Math.floor(Math.random() * entrenamientos.length);
      setIndex(randomIndex);
    }
  }, [entrenamientos]);

  const sigEntrenamiento = () => {
    setIndex((prev) => (prev + 1) % entrenamientos.length);
  };

  const antEntrenamiento = () => {
    setIndex((prev) => (prev === 0 ? entrenamientos.length - 1 : prev - 1));
  };

  const handleSelect = () => {
    router.push("/(entrenar)/detallesDeEntrenamiento");
  };

  const minutos = Math.floor(entrenamientos[index].tiempoTotal / 60);
  const segundos = (entrenamientos[index].tiempoTotal % 60)
    .toString()
    .padStart(2, "0");

  return (
    <View className="flex-col h-full items-center justify-around bg-[#121212] p-4 py-8">
      <Text className="text-white text-4xl font-semibold">
        Entrena ahora
      </Text>

      <View className="flex-row w-full items-center justify-around">
        <TouchableOpacity className="" onPress={antEntrenamiento}>
          <ChevronLeft size={40} color="#6842FF" />
        </TouchableOpacity>
        <Image
          className="w-[225px] h-[225px] rounded-2xl"
          source={imagesMap[entrenamientos[index].imagen]}
        />
        <TouchableOpacity onPress={sigEntrenamiento}>
          <ChevronRight size={40} color="#6842FF" />
        </TouchableOpacity>
      </View>

      <View className="w-full px-2">
        <Text className="text-white text-2xl font-bold mb-2">
          {entrenamientos[index].nombre}
        </Text>
        <View className="border-b border-gray-700 m-2" />
        <View className="flex-row items-center justify-between ">
          <Text className="text-gray-400 text-base px-3 mb-4">
            Nivel: {entrenamientos[index].nivel}
          </Text>
          <Text className="text-gray-400 text-base px-3 mb-4">
            {entrenamientos[index].ejercicios.length} ejercicios
          </Text>
        </View>
        <View className="flex-row items-center justify-between">
          <Text className="text-gray-400 text-base px-3 mb-4">
            Grupo: {entrenamientos[index].grupo}
          </Text>
          <Text className="text-gray-400 text-base px-3 mb-4">
            {minutos}:{segundos} min
          </Text>
        </View>
        <Text className="text-gray-400 text-sm px-6">
          {entrenamientos[index].descripcion}
        </Text>
        <View className="border-b border-gray-700 m-2" />
      </View>

      <TouchableOpacity
        onPress={handleSelect}
        className="bg-[#6842FF] py-3 px-6 rounded-2xl"
      >
        <Text className="text-white text-lg font-bold">Entrenar</Text>
      </TouchableOpacity>
    </View>
  );
}


// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\(dashboard)\index.tsx ---
// app/(dashboard)/index.tsx

import React, { useState } from "react";
import {
  View,
  Text,
  ScrollView,
  Pressable,
  TouchableOpacity,
} from "react-native";
import { router } from "expo-router";

import { useEntrenamientos } from "@/context/EntrenamientosContext";
import { useUser } from "@/context/UsersContext";

import type { IEntrenamiento } from "@/context/EntrenamientosContext";

import EntrenamientoCard from "@/components/dashboard/EntrenamientoCard";
import NivelButton from "@/components/dashboard/NivelButton";
import TopNavbar from "@/components/TopNavbar";

export default function HomeScreen() {
  const { entrenamientos, setSelectedEntrenamiento } = useEntrenamientos();
  const { user } = useUser();

  const [filtroPorNivel, setFiltroPorNivel] = useState("Principiante");

  const niveles = ["Principiante", "Intermedio", "Avanzado"];

  const entrenamientoSeleccionado = (entrenamiento: IEntrenamiento) => {
    setSelectedEntrenamiento(entrenamiento);
    router.push("/(entrenar)/detallesDeEntrenamiento");
  };

  return (
    <View className="flex-1 bg-[#121212] p-3">
      <TopNavbar logo={true} iconNotif={true} iconFav={true} />
      <Text className="text-white text-2xl font-semibold p-2">
        Hola, {user?.name} ðŸ‘‹
      </Text>

      <View className="flex-row items-center justify-between pt-2 px-2">
        <Text className="text-white text-lg">Mis entrenamientos</Text>
        <TouchableOpacity
          onPress={() => {
            router.push(`/(entrenar)/entrenamientosFav`);
          }}
        >
          <Text className="text-[#6842FF] text-sm">Ver mÃ¡s</Text>
        </TouchableOpacity>
      </View>

      <View>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          {entrenamientos.map((unEntrenamiento, idx) => (
            <TouchableOpacity
              key={unEntrenamiento._id || idx}
              className="m-3"
              onPress={() => entrenamientoSeleccionado(unEntrenamiento)}
            >
              <EntrenamientoCard
                key={unEntrenamiento._id || idx}
                tipo="Card Grande"
                entrenamiento={unEntrenamiento}
              />
            </TouchableOpacity>
          ))}
        </ScrollView>
      </View>

      <View className="flex-row items-center justify-between">
        <Text className="text-white text-lg font-semibold">Niveles</Text>
        <Pressable
          onPress={() => {
            // router.push(`/entrenamientosPorNivel`);
          }}
        >
          <Text className="text-[#6842FF] text-sm">Ver mÃ¡s</Text>
        </Pressable>
      </View>
      <View className="flex-row items-center justify-around py-2">
        {niveles.map((nivel) => {
          const isActive = nivel === filtroPorNivel;

          return (
            <NivelButton
              key={nivel}
              label={nivel}
              onPress={() => setFiltroPorNivel(nivel)}
              isActive={isActive}
            />
          );
        })}
      </View>

      <View className="flex-1 flex-col items-center justify-center">
        <ScrollView showsVerticalScrollIndicator={false}>
          {entrenamientos
            .filter(
              (entrenamientoFiltrado) =>
                entrenamientoFiltrado.nivel === filtroPorNivel,
            )
            .map((unEntrenamiento, idx) => (
              <TouchableOpacity
                key={unEntrenamiento._id || idx}
                className="py-2"
                onPress={() => entrenamientoSeleccionado(unEntrenamiento)}
              >
                <EntrenamientoCard
                  key={unEntrenamiento._id || idx}
                  tipo="Card Chica"
                  entrenamiento={unEntrenamiento}
                />
              </TouchableOpacity>
            ))}
        </ScrollView>
      </View>
    </View>
  );
}


// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\(dashboard)\perfil.tsx ---
// app/(dashboard)/perfil.tsx

import { View, Text, Switch, ScrollView } from "react-native";
import { Ionicons } from "@expo/vector-icons";
import React, { useState } from "react";
import { useRouter } from "expo-router";
import { Image } from "expo-image";

import { useUser } from "@/context/UsersContext";

import Item from "@/components/usuario/ItemPerfil";
import TopNavbar from "@/components/TopNavbar";

export default function PerfilScreen() {
  const router = useRouter();

  const { user, logout } = useUser();

  const [darkMode, setDarkMode] = useState(false);

  const handleToggleDarkMode = () => setDarkMode((prev) => !prev);

  const handleNotificaciones = () => {
    router.push("/(usuario)/notificaciones");
  };

  const handleSalir = () => {
    logout();
    router.push("/(usuario)/login");
  };

  return (
    <View className="flex-1 bg-[#121212]">
      {/* Navbar superior */}
      <TopNavbar titulo="Perfil" />

      {/* Contenido principal */}
      <ScrollView className="flex-1 px-4">
        {/* Foto y datos de usuario */}
        <View className="items-center mt-6">
          <View className="relative">
            <Image
              source={{
                uri: "https://randomuser.me/api/portraits/women/32.jpg",
              }}
              className="w-24 h-24 rounded-full"
            />
          </View>

          <Text className="text-white text-xl font-semibold mt-3">
            {user?.name}
          </Text>
          <Text className="text-gray-300 text-sm mt-2">{user?.email}</Text>
        </View>

        {/* SecciÃ³n de items (Editar perfil, Notificaciones, etc.) */}
        <View className="p-2 mt-6  border-t border-gray-700">
          <Item icono="person-outline" contenido="Editar perfil" />
          <Item
            icono="notifications-outline"
            contenido="Notificaciones"
            onPress={handleNotificaciones}
          />
          <Item icono="settings-outline" contenido="Configuracion" />
          <Item icono="help-circle-outline" contenido="Informacion" />

          {/* Dark Theme */}
          <View className="flex-row items-center justify-between">
            <View className="flex-row items-center">
              <Ionicons name="moon-outline" size={20} color="#FFF" />
              <Text className="text-white ml-3">Dark Theme</Text>
            </View>
            <Switch
              value={darkMode}
              onValueChange={handleToggleDarkMode}
              trackColor={{ false: "#767577", true: "#6842FF" }}
              thumbColor={darkMode ? "#FFF" : "#f4f3f4"}
            />
          </View>
        </View>

        {/* Salir */}
        <View className="w-full border-t border-gray-700 p-2">
          <Item
            icono="log-out-outline"
            contenido="Salir"
            color="#FF4444"
            onPress={handleSalir}
          />
        </View>
      </ScrollView>
    </View>
  );
}


// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\(dashboard)\_layout.tsx ---
// app/(dashboard)/_layout.tsx

import { Ionicons } from "@expo/vector-icons";
import { Tabs } from "expo-router";
import React from "react";

export default function TabLayout() {
  return (
    <>
      <Tabs
        screenOptions={{
          headerShown: false,
          tabBarStyle: {
            backgroundColor: "#121212",
            borderTopColor: "#1E1E1E",
          },
          tabBarActiveTintColor: "#6842FF",
          tabBarInactiveTintColor: "#888",
          tabBarBackground: undefined,
        }}
      >
        <Tabs.Screen
          name="index"
          options={{
            title: "Home",
            tabBarIcon: ({ color }) => (
              <Ionicons name="home" size={24} color={color} />
            ),
          }}
        />
        <Tabs.Screen
          name="entrenar"
          options={{
            title: "Entrenar",
            tabBarIcon: ({ color }) => (
              <Ionicons name="play-circle" size={24} color={color} />
            ),
          }}
        />
        <Tabs.Screen
          name="perfil"
          options={{
            title: "Perfil",
            tabBarIcon: ({ color }) => (
              <Ionicons name="person-circle" size={24} color={color} />
            ),
          }}
        />
      </Tabs>
    </>
  );
}


// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\(entrenar)\detallesDeEjercicios.tsx ---
// app/(entrenar)/detallesDeEjercicios.tsx

import { View, ScrollView } from "react-native";
import React from "react";

import { useEntrenamientos } from "@/context/EntrenamientosContext";
import { useImagesMap } from "@/context/ImagesMapContext";

import EjercicioCard from "@/components/entrenar/EjercicioCard";

import TopNavbar from "@/components/TopNavbar";

export default function DetallesDeEjercicios() {
  const { selectedEntrenamiento } = useEntrenamientos();
  const { imagesMap } = useImagesMap();

  return (
    <View className="flex-1 bg-[#121212] p-3">
      <TopNavbar iconBack={true} titulo="Rondas" />

      <ScrollView showsVerticalScrollIndicator={false} className="flex-1 pt-4">
        {selectedEntrenamiento?.ejercicios.map((ejercicio, idx) => (
          <EjercicioCard
            key={idx}
            imagen={imagesMap[ejercicio.imagen]}
            label={ejercicio.nombre}
            tiempoTotal={ejercicio.tiempo}
          />
        ))}
      </ScrollView>
    </View>
  );
}


// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\(entrenar)\detallesDeEntrenamiento.tsx ---
// app/(entrenar)/detallesDeEntrenamiento.tsx

import {
  View,
  Text,
  ScrollView,
  Pressable,
  TouchableOpacity,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { useRouter } from "expo-router";
import { Image } from "expo-image";
import React from "react";

import { useEntrenamientos } from "@/context/EntrenamientosContext";
import { useImagesMap } from "@/context/ImagesMapContext";

import EjercicioCard from "@/components/entrenar/EjercicioCard";
import ChipInfo from "@/components/entrenar/ChipInfo";

export default function DetallesDeEntrenamiento() {
  const router = useRouter();

  const { selectedEntrenamiento } = useEntrenamientos();
  const { imagesMap } = useImagesMap();

  const handleStart = () => {
    router.push("/(entrenar)/entrenar");
    console.log("Se enviÃ³ 'Hola Mundo' a esp32/test");
  };

  const mainImage =
    (selectedEntrenamiento?.imagen &&
      imagesMap[selectedEntrenamiento.imagen]) ||
    require("@/assets/defaultWorkout.png");

  return (
    <View className="flex-1 bg-[#121212]">
      <View className="relative">
        <Image
          source={mainImage}
          className="w-full h-[300px]"
          contentFit="cover"
        />
        <Pressable
          onPress={() => router.back()}
          className="absolute top-8 p-2"
        >
          <Ionicons name="chevron-back" size={30} color="#FFFFFF" />
        </Pressable>
      </View>

      <View className="px-4 flex-1">
        {/* TÃ­tulo */}
        <Text className="text-white text-2xl font-semibold py-4">
          {selectedEntrenamiento?.nombre}
        </Text>

        {/* Chips de info */}
        <View className="flex-row justify-around pb-3">
          <ChipInfo label={selectedEntrenamiento?.nivel} icon="None" />
          <ChipInfo
            totalTime={selectedEntrenamiento?.tiempoTotal}
            icon="Time"
          />
          <ChipInfo
            label={selectedEntrenamiento?.ejercicios.length}
            icon="Play"
          />
        </View>

        {/* SecciÃ³n de ejercicios (Ver mÃ¡s) */}
        <View className="flex-row items-center justify-between border-t border-gray-700 py-3 px-1">
          <Text className="text-white text-lg font-semibold">Rondas</Text>
          <TouchableOpacity
            onPress={() => router.push("/(entrenar)/detallesDeEjercicios")}
          >
            <Text className="text-[#7B61FF] text-sm">Ver mÃ¡s</Text>
          </TouchableOpacity>
        </View>

        <ScrollView
          className="flex-1 px-4"
          showsVerticalScrollIndicator={false}
        >
          {selectedEntrenamiento?.ejercicios.map((ejercicio, idx) => (
            <EjercicioCard
              key={idx}
              imagen={imagesMap[ejercicio.imagen]}
              label={ejercicio.nombre}
              tiempoTotal={ejercicio.tiempo}
            />
          ))}
        </ScrollView>
      </View>

      <View className="px-3 py-2 border-t border-gray-700">
        <TouchableOpacity
          className="bg-[#6842FF] rounded-full py-4 mx-5 my-2"
          onPress={handleStart}
        >
          <Text className="text-white text-center text-base font-semibold">
            INICIAR
          </Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}


// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\(entrenar)\entrenamientosFav.tsx ---
// app/(entrenar)/entrenamientosFav.tsx

import { View, ScrollView } from "react-native";
import React from "react";

import { useEntrenamientos } from "@/context/EntrenamientosContext";
import { useUser } from "@/context/UsersContext";

import EntrenamientoCard from "@/components/dashboard/EntrenamientoCard";
import TopNavbar from "@/components/TopNavbar";

export default function EntrenamientosFav() {
  const { entrenamientos } = useEntrenamientos();
  const { user } = useUser();

  const entrenamientosFav = entrenamientos.filter((entrenamiento) =>
    user?.favs.includes(entrenamiento._id),
  );

  return (
    <View className="flex-col h-full bg-[#121212] p-3">
      <TopNavbar iconBack={true} titulo="Entrenamientos favoritos" />
      <ScrollView showsVerticalScrollIndicator={false}>
        <View className="flex-row flex-wrap pt-4 justify-start">
          {entrenamientosFav.map((item, idx) => (
            <View key={idx} className="w-1/2 p-2">
              <EntrenamientoCard tipo="Card Grid" entrenamiento={item} />
            </View>
          ))}
        </View>
      </ScrollView>
    </View>
  );
}


// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\(entrenar)\entrenar.tsx ---
// app/(entrenar)/index.tsx

import React, { useState, useEffect } from "react";
import { View } from "react-native";
import { useEntrenamientos } from "@/context/EntrenamientosContext";
import { useEjercicios } from "@/context/EjerciciosContext";

import { useTimer } from "@/utils/utilsEntrenamientos";

import EjercicioScreen from "./screens/EjercicioScreen";
import DescansoScreen from "./screens/DescansoScreen";
import InicioScreen from "./screens/InicioScreen";
import FinScreen from "./screens/FinScreen";

type Etapa = "INICIO" | "ACTIVO" | "DESCANSO" | "FIN";

export default function Entrenamiento() {
  const { selectedEntrenamiento } = useEntrenamientos();
  const { setEjercicioActual } = useEjercicios();

  // Estados
  const [indiceEjercicio, setIndiceEjercicio] = useState<number>(-1);
  const [etapaActual, setEtapaActual] = useState<Etapa>("INICIO");
  const [pausa, setPausa] = useState<boolean>(false);
  const [tiempo, setTiempo] = useState<number>(1);

  // Cuando cambia el Ã­ndice, actualizamos el ejercicio actual y el tiempo
  useEffect(() => {
    if (selectedEntrenamiento && indiceEjercicio >= 0) {
      const ejercicio = selectedEntrenamiento.ejercicios[indiceEjercicio];
      setEjercicioActual(ejercicio);
      setTiempo(ejercicio.tiempo);
      resetTimer();
    }
  }, [indiceEjercicio]);

  const onTiempoAgotado = () => {
    if (etapaActual === "INICIO") {
      setIndiceEjercicio(0);
      setEtapaActual("ACTIVO");
    } else if (etapaActual === "ACTIVO") {
      if (indiceEjercicio === selectedEntrenamiento!.ejercicios.length - 1) {
        setEtapaActual("FIN");
      } else {
        setEtapaActual("DESCANSO");
        setTiempo(5);
      }
    } else if (etapaActual === "DESCANSO") {
      if (indiceEjercicio < selectedEntrenamiento!.ejercicios.length - 1) {
        const sigIndice = indiceEjercicio + 1;
        setIndiceEjercicio(sigIndice);
        setEtapaActual("ACTIVO");
      }
    }
  };

  const { tiempoTranscurrido, resetTimer } = useTimer(
    tiempo,
    pausa,
    onTiempoAgotado,
  );

  return (
    <View className="flex-1 bg-[#121212]">
      {etapaActual === "INICIO" ? (
        <InicioScreen
          tiempoRestante={tiempo - tiempoTranscurrido}
          onReset={resetTimer}
        />
      ) : etapaActual === "ACTIVO" ? (
        <EjercicioScreen
          tiempoTranscurrido={tiempoTranscurrido}
          onPause={() => setPausa((prev) => !prev)}
        />
      ) : etapaActual === "DESCANSO" ? (
        <DescansoScreen
          tiempoTranscurrido={tiempoTranscurrido}
          indiceDeEjercicio={indiceEjercicio}
        />
      ) : etapaActual === "FIN" ? (
        <FinScreen />
      ) : null}
    </View>
  );
}


// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\(entrenar)\_layout.tsx ---
// app/(entrenar)/_layout.tsx

import { Stack } from "expo-router";

export default function EntrenarLayout() {
  return (
    <Stack>
      <Stack.Screen name="index" options={{ headerShown: false }} />
      <Stack.Screen
        name="detallesDeEntrenamiento"
        options={{ headerShown: false }}
      />
      <Stack.Screen
        name="detallesDeEjercicios"
        options={{ headerShown: false }}
      />
      <Stack.Screen name="ejercicios" options={{ headerShown: false }} />
      <Stack.Screen name="entrenar" options={{ headerShown: false }} />
      <Stack.Screen name="entrenamientosFav" options={{ headerShown: false }} />
    </Stack>
  );
}


// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\(entrenar)\screens\DescansoScreen.tsx ---
import { View, Text, Image, TouchableOpacity } from "react-native";
import React from "react";

import { useEntrenamientos } from "@/context/EntrenamientosContext";
import { useEjercicios } from "@/context/EjerciciosContext";
import { useImagesMap } from "@/context/ImagesMapContext";

interface DescansoScreenProps {
  tiempoTranscurrido: number;
  indiceDeEjercicio: number;
}

export default function DescansoScreen({
  tiempoTranscurrido,
  indiceDeEjercicio,
}: DescansoScreenProps) {
  const { selectedEntrenamiento } = useEntrenamientos();
  const { ejercicioActual } = useEjercicios();
  const { imagesMap } = useImagesMap();

  const siguienteEjercicio =
    selectedEntrenamiento?.ejercicios[indiceDeEjercicio + 1];

  if (!ejercicioActual || !siguienteEjercicio) {
    return (
      <View className="flex-1 items-center justify-center w-full h-full bg-[#121212]">
        <Text className="text-white">No hay datos de entrenamiento o ejercicio.</Text>
      </View>
    );
  }

  const handleSkipRest = () => {
    // tu lÃ³gica para saltar el descanso
  };

  // Formatear el tiempo para mostrarlo como mm:ss
  const minutes = Math.floor(tiempoTranscurrido / 60);
  const seconds = tiempoTranscurrido % 60;
  const formattedMinutes = minutes.toString().padStart(2, "0");
  const formattedSeconds = seconds.toString().padStart(2, "0");

  return (
    <View className="flex-1 items-center justify-between bg-[#121212] py-5">
      {/* Encabezado */}
      <View className="flex-col items-center justify-around py-5 mt-12">
        <Text className="text-[#6842FF] text-3xl font-semibold">Toma un descanso</Text>
        <Text className="text-white text-5xl font-extrabold mt-6">
          {formattedMinutes}:{formattedSeconds}
        </Text>
        <View className="mt-4 border-b border-gray-700 w-72"/>
      </View>

      {/* SecciÃ³n Intermedia */}
      <View className="flex-1 items-left justify-around w-full px-8 mb-10">
        <Text className="text-gray-400 text-base">
          Siguiente ronda ({indiceDeEjercicio + 2} de {selectedEntrenamiento?.ejercicios.length})
        </Text>
        <Text className="text-white text-2xl font-semibold mb-4">
          {siguienteEjercicio.nombre}
        </Text>
        <View className="items-center">
          <View className="w-[275px] h-[275px] overflow-hidden rounded-3xl">
            <Image
              source={imagesMap[siguienteEjercicio.imagen]}
              className="w-full h-full"
              resizeMode="contain"
              />
          </View>
        </View>
      </View>

      {/* BotÃ³n Quitar Descanso */}
      <TouchableOpacity
        onPress={handleSkipRest}
        className="bg-[#6842FF] py-4 px-8 rounded-full w-full"
        style={{ maxWidth: 300, alignSelf: "center" }}
      >
        <Text className="text-white text-center font-semibold">Quitar descanso</Text>
      </TouchableOpacity>
    </View>
  );
}


// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\(entrenar)\screens\EjercicioScreen.tsx ---
import React, { useState } from "react";
import { View, Text, Image, TouchableOpacity } from "react-native";
import ProgressCircular from "@/components/entrenar/ProgressCircular";
import { useEjercicios } from "@/context/EjerciciosContext";
import { useImagesMap } from "@/context/ImagesMapContext";

type EjercicioScreenProps = {
  tiempoTranscurrido: number;
  onPause: () => void;
};

export default function EjercicioScreen({
  tiempoTranscurrido,
  onPause,
}: EjercicioScreenProps) {
  const { ejercicioActual } = useEjercicios();
  const { imagesMap } = useImagesMap();

  const [size, setSize] = useState({ width: 0, height: 0 });

  if (!ejercicioActual) return null;

  return (
    <View className="flex-1 bg-[#121212]">
      {/* Parte superior con la imagen */}
      <Image
        source={imagesMap[ejercicioActual.imagen]}
        className="w-full h-1/2"
        resizeMode="cover"
      />

      {/* Parte inferior */}
      <View className="w-full h-1/2 items-center justify-around py-5">
        <Text className="text-white text-3xl font-bold">
          {ejercicioActual.nombre}
        </Text>

        {/* Contenedor que mediremos con onLayout */}
        <View
          className="w-full flex-1"
          onLayout={(e) => {
            const { width, height } = e.nativeEvent.layout;
            setSize({ width, height });
          }}
        >
          {/* Solo renderiza el ProgressCircular cuando tenemos las dimensiones */}
          {size.width > 0 && size.height > 0 && (
            <ProgressCircular
              tiempoMaximo={ejercicioActual.tiempo}
              containerWidth={size.width}
              containerHeight={size.height}
              colores={["#0CF25D", "#038C3E", "#025951", "#02735E"]}
            />
          )}
        </View>

        <TouchableOpacity
          onPress={onPause}
          activeOpacity={0.7}
          className="bg-[#6842FF] px-8 py-2 rounded-full"
        >
          <Text className="text-whit">Pausa</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}


// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\(entrenar)\screens\FinScreen.tsx ---
// app/(entrenar)/screens/FinScreen.tsx
import { View, Text, TouchableOpacity, Image } from "react-native";
import { useRouter } from "expo-router";
import React from "react";

import { useEntrenamientos } from "@/context/EntrenamientosContext";
import { useEjercicios } from "@/context/EjerciciosContext";
import { calcularTiempo } from "@/utils/utilsEntrenamientos";

export default function FinScreen() {
  const router = useRouter();
  const { selectedEntrenamiento } = useEntrenamientos();
  const { ejercicioActual } = useEjercicios();

  if (!ejercicioActual || !selectedEntrenamiento) {
    return null;
  }

  return (
    <View className="flex-col items-center justify-around p-6 bg-[#121212]">
      <View className="mt-10">
        <Image
          source={require("@/assets/ejercicios/trofeo.png")}
          style={{ width: 300, height: 300 }}
          resizeMode="contain"
        />
      </View>

      <View className="items-center">
        <Text className="text-[#FFD700] text-3xl font-bold mb-2">
          Â¡Felicidades!
        </Text>
        <Text className="text-white text-base mb-6">
          Â¡Has completado el entrenamiento!
        </Text>
      </View>

      <View className="w-full border-b border-gray-700 mb-6" />

      <View className="flex-row w-full justify-around mb-6">
        <View className="items-center ">
          <Text className="text-white text-xl font-bold">
            {selectedEntrenamiento.ejercicios.length}
          </Text>
          <Text className="text-gray-400 text-sm">Rondas</Text>
        </View>
        <View className="border-r border-gray-700" />
        <View className="items-center">
          <Text className="text-white text-xl font-bold">
            {ejercicioActual.calorias}
          </Text>
          <Text className="text-gray-400 text-sm">Cal</Text>
        </View>
        <View className="border-r border-gray-700" />
        <View className="items-center">
          <Text className="text-white text-xl font-bold">
            {calcularTiempo(selectedEntrenamiento.tiempoTotal)}
          </Text>
          <Text className="text-gray-400 text-sm">Minutos</Text>
        </View>
      </View>

      <View className="w-full mt-12">
        <TouchableOpacity
          onPress={() => router.push("/(dashboard)/entrenar")}
          className="bg-[#6842FF] py-4 mb-6 rounded-full"
        >
          <Text className="text-white text-center font-semibold">
            Iniciar otro entrenamiento
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          onPress={() => router.push("/(dashboard)")}
          className="bg-[#1E1E1E] py-4 rounded-full"
        >
          <Text className="text-white text-center font-semibold">
            Volver al Inicio
          </Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}


// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\(entrenar)\screens\InicioScreen.tsx ---
// app/(entrenar)/screens/InicioScreen.tsx

import { View, Text, TouchableOpacity } from "react-native";
import React from "react";

interface ReadyProps {
  tiempoRestante: number;
  onReset: () => void;
}

function ReadyScreen({ tiempoRestante, onReset }: ReadyProps) {
  return (
    <View className="flex-1 items-center justify-center">
      <Text className="text-white text-4xl font-bold mb-4">Â¡PrepÃ¡rate!</Text>
      <Text className="text-white text-6xl">{tiempoRestante}</Text>
      <TouchableOpacity
        onPress={onReset}
        className="bg-[#6842FF] py-2 px-4 rounded-full"
      >
        <Text className="text-white">Reiniciar</Text>
      </TouchableOpacity>
    </View>
  );
}

export default ReadyScreen;


// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\(usuario)\login.tsx ---
import AsyncStorage from "@react-native-async-storage/async-storage";
import { View, Text, TextInput, TouchableOpacity } from "react-native";
import { MaterialIcons, FontAwesome } from "@expo/vector-icons";
import React, { useState } from "react";
import { useRouter } from "expo-router";

import { useUser } from "@/context/UsersContext";

export default function LoginScreen() {
  const router = useRouter();

  const { login } = useUser();

  const [recordar, setRecordar] = useState(false);
  const [password, setPassword] = useState("");
  const [email, setEmail] = useState("");
  const [error, setError] = useState("");

  const handleLogin = async () => {
    try {
      await login(email, password);
      router.push("/(dashboard)");
    } catch (e: any) {
      console.error(e);
      setError(e.message || "Error en la conexiÃ³n");
    }
  };

  return (
    <View className="flex-col w-full h-full justify-around bg-[#121212] px-8">
      <Text className="text-4xl text-white font-bold mt-12">
        Ingresa con tu cuenta
      </Text>

      <View className="flex-col space-y-6">
        <View className="flex-row items-center bg-gray-800 rounded-lg px-4">
          <MaterialIcons name="email" size={20} color="#888" />
          <TextInput
            className="flex-1 text-white h-12 ml-2"
            placeholder="Correo electrÃ³nico"
            placeholderTextColor="#888"
            value={email}
            onChangeText={setEmail}
          />
        </View>

        <View className="flex-row items-center bg-gray-800 rounded-lg px-4 ">
          <MaterialIcons name="lock" size={20} color="#888" />
          <TextInput
            className="flex-1 text-white h-12 ml-2"
            placeholder="ContraseÃ±a"
            placeholderTextColor="#888"
            secureTextEntry
            value={password}
            onChangeText={setPassword}
          />
          <MaterialIcons
            name="visibility-off"
            size={20}
            color="#888"
            className="ml-2"
          />
        </View>

        <TouchableOpacity
          className="flex-row items-center justify-center"
          onPress={() => setRecordar(!recordar)}
        >
          <View
            className={`w-5 h-5 rounded-md border-2 border-gray-500 mr-3 ${recordar ? "bg-[#6842FF]" : ""}`}
          />
          <Text className="text-white">Recordarme</Text>
        </TouchableOpacity>

        <TouchableOpacity
          className="bg-[#6842FF] rounded-lg items-center py-4"
          onPress={handleLogin}
        >
          <Text className="text-white text-lg font-bold">Iniciar sesiÃ³n</Text>
        </TouchableOpacity>

        <TouchableOpacity activeOpacity={0.7}>
          <Text className="text-[#6842FF] text-center ">
            Â¿Olvidaste tu contraseÃ±a?
          </Text>
        </TouchableOpacity>
      </View>

      <View className="flex-row items-center justify-around">
        <View className="w-1/4 border-b border-gray-700" />
        <Text className="text-gray-400 text-center ">o continÃºa con</Text>
        <View className="w-1/4 border-b border-gray-700" />
      </View>

      <View className="flex-row items-center justify-around px-12">
        <TouchableOpacity className="items-center w-16 h-12 bg-gray-800 p-3 rounded-lg">
          <FontAwesome name="facebook" size={24} color="#1877F2" />
        </TouchableOpacity>
        <TouchableOpacity className="items-center w-16 h-12 bg-gray-800 p-3 rounded-lg">
          <FontAwesome name="google" size={24} color="#DB4437" />
        </TouchableOpacity>
        <TouchableOpacity className="items-center w-16 h-12 bg-gray-800 p-3 rounded-lg">
          <FontAwesome name="apple" size={24} color="#FFF" />
        </TouchableOpacity>
      </View>

      <View className="flex-row items-center justify-center">
        <Text className="text-gray-400 text-center">
          Â¿No tienes una cuenta?
        </Text>
        <TouchableOpacity
          activeOpacity={0.7}
          onPress={() => router.push("/(usuario)/register")}
        >
          <Text className="ml-2 text-[#6842FF] font-bold">RegÃ­strate</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}


// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\(usuario)\notificaciones.tsx ---
import { View, ScrollView } from "react-native";
import React from "react";

import TopNavbar from "@/components/TopNavbar";
import NotifItem from "@/components/usuario/NotifiItem";

export default function NotificationScreen({ navigation }: any) {
  return (
    <View className="flex-1 bg-[#121212] pt-10 p-4 pb-4">
      <TopNavbar titulo="Notificaciones" iconBack={true} />

      {/* CONTENIDO */}
      <ScrollView className="flex-1 mt-8" showsVerticalScrollIndicator={false}>
        {/* Lista de notificaciones */}
        <NotifItem
          tipo="check"
          titulo="Congratulations!"
          contenido="You've been exercising for 2 hours"
        />
      </ScrollView>
    </View>
  );
}


// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\(usuario)\register.tsx ---
import { View, Text, TextInput, TouchableOpacity } from "react-native";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { MaterialIcons, FontAwesome } from "@expo/vector-icons";
import React, { useState } from "react";
import { useRouter } from "expo-router";

const RegisterScreen = () => {
  const router = useRouter();

  const [name, setName] = useState("");
  const [recordar, setRecordar] = useState(false);
  const [password, setPassword] = useState("");
  const [email, setEmail] = useState("");
  const [error, setError] = useState("");

  const handleRegister = async () => {
    try {
      console.log(name, email, password);
      const response = await fetch(
        "http://192.168.1.5:5000/api/auth/register",
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ name, email, password }),
        },
      );
      if (!response.ok) {
        const data = await response.json();
        setError(data.message || "Error en el registro");
        return;
      }
      const data = await response.json();
      await AsyncStorage.setItem("@token", data.token);
      await AsyncStorage.setItem("@user", JSON.stringify(data.user));
      router.push("/(dashboard)");
    } catch (e) {
      console.error(e);
      setError("Error en la conexiÃ³n");
    }
  };

  return (
    <View className="flex-col w-full h-full justify-around bg-gray-900 px-8">
      <Text className="text-4xl text-white font-bold mt-12 mb-4">
        Crea tu cuenta
      </Text>

      <View className="flex-col space-y-6">
        <View className="flex-row items-center bg-gray-800 rounded-lg px-4">
          <TextInput
            className="flex-1 text-white h-12 ml-2"
            placeholder="Nombre"
            placeholderTextColor="#888"
            value={name}
            onChangeText={setName}
          />
        </View>
        <View className="flex-row items-center bg-gray-800 rounded-lg px-4">
          <MaterialIcons name="email" size={20} color="#888" />
          <TextInput
            className="flex-1 text-white h-12 ml-2"
            placeholder="Correo electrÃ³nico"
            placeholderTextColor="#888"
            value={email}
            onChangeText={setEmail}
          />
        </View>

        <View className="flex-row items-center bg-gray-800 rounded-lg px-4 ">
          <MaterialIcons name="lock" size={20} color="#888" />
          <TextInput
            className="flex-1 text-white h-12 ml-2"
            placeholder="ContraseÃ±a"
            placeholderTextColor="#888"
            secureTextEntry
            value={password}
            onChangeText={setPassword}
          />
          <MaterialIcons
            name="visibility-off"
            size={20}
            color="#888"
            className="ml-2"
          />
        </View>

        <TouchableOpacity
          className="flex-row items-center justify-center"
          onPress={() => setRecordar(!recordar)}
        >
          <View
            className={`w-5 h-5 rounded-md border-2 border-gray-500 mr-3 ${recordar ? "bg-[#6842FF]" : ""}`}
          />
          <Text className="text-white">Recordarme</Text>
        </TouchableOpacity>

        <TouchableOpacity
          className="bg-[#6842FF] rounded-lg items-center py-4"
          onPress={handleRegister}
        >
          <Text className="text-white text-lg font-bold">Registrarse</Text>
        </TouchableOpacity>
      </View>

      <View className="flex-row items-center justify-around">
        <View className="w-1/4 border-b border-gray-700" />
        <Text className="text-gray-400 text-center ">o continÃºa con</Text>
        <View className="w-1/4 border-b border-gray-700" />
      </View>

      <View className="flex-row items-center justify-around px-12">
        <TouchableOpacity className="items-center w-16 h-12 bg-gray-800 p-3 rounded-lg">
          <FontAwesome name="facebook" size={24} color="#1877F2" />
        </TouchableOpacity>
        <TouchableOpacity className="items-center w-16 h-12 bg-gray-800 p-3 rounded-lg">
          <FontAwesome name="google" size={24} color="#DB4437" />
        </TouchableOpacity>
        <TouchableOpacity className="items-center w-16 h-12 bg-gray-800 p-3 rounded-lg">
          <FontAwesome name="apple" size={24} color="#FFF" />
        </TouchableOpacity>
      </View>

      <View className="flex-row items-center justify-center">
        <Text className="text-gray-400 text-center">
          Â¿Ya tienes una cuenta?
        </Text>
        <TouchableOpacity
          activeOpacity={0.7}
          onPress={() => router.push("/(usuario)/login")}
        >
          <Text className="ml-2 text-[#6842FF] font-bold">Inicia sesiÃ³n</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

export default RegisterScreen;


// --- Contenido de C:/Users/ramos/Desktop/apps/ledfit/ledfit_front/app\(usuario)\_layout.tsx ---
// app/(usuario)/_layout.tsx

import { Stack } from "expo-router";

export default function UsuarioLayout() {
  return (
    <Stack>
      <Stack.Screen name="index" options={{ headerShown: false }} />
      <Stack.Screen name="notificaciones" options={{ headerShown: false }} />
      <Stack.Screen name="login" options={{ headerShown: false }} />
      <Stack.Screen name="register" options={{ headerShown: false }} />
    </Stack>
  );
}


